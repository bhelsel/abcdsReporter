% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{atri_join}
\alias{atri_join}
\title{Flexible Join for dplyr}
\usage{
atri_join(x, y, by, join_type, ...)
}
\arguments{
\item{x, y}{A pair of data frames, data frame extensions (e.g. a tibble), or
lazy data frames (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for
more details.}

\item{by}{A join specification created with \code{\link[dplyr:join_by]{join_by()}}, or a character
vector of variables to join by.

If \code{NULL}, the default, \verb{*_join()} will perform a natural join, using all
variables in common across \code{x} and \code{y}. A message lists the variables so
that you can check they're correct; suppress the message by supplying \code{by}
explicitly.

To join on different variables between \code{x} and \code{y}, use a \code{\link[dplyr:join_by]{join_by()}}
specification. For example, \code{join_by(a == b)} will match \code{x$a} to \code{y$b}.

To join by multiple variables, use a \code{\link[dplyr:join_by]{join_by()}} specification with
multiple expressions. For example, \code{join_by(a == b, c == d)} will match
\code{x$a} to \code{y$b} and \code{x$c} to \code{y$d}. If the column names are the same between
\code{x} and \code{y}, you can shorten this by listing only the variable names, like
\code{join_by(a, c)}.

\code{\link[dplyr:join_by]{join_by()}} can also be used to perform inequality, rolling, and overlap
joins. See the documentation at \link[dplyr:join_by]{?join_by} for details on
these types of joins.

For simple equality joins, you can alternatively specify a character vector
of variable names to join by. For example, \code{by = c("a", "b")} joins \code{x$a}
to \code{y$a} and \code{x$b} to \code{y$b}. If variable names differ between \code{x} and \code{y},
use a named character vector like \code{by = c("x_a" = "y_a", "x_b" = "y_b")}.

To perform a cross-join, generating all combinations of \code{x} and \code{y}, see
\code{\link[dplyr:cross_join]{cross_join()}}.}

\item{join_type}{The type of \code{dplyr} join to perform. Can be a string
(e.g., "inner_join"), a symbol (e.g., \code{inner_join}), or a function
(e.g., \code{dplyr::inner_join}).}

\item{...}{Additional arguments passed to the chosen \code{dplyr} join function.}
}
\value{
A \code{\link[tibble]{tibble}} containing the joined data.
}
\description{
Performs a flexible join on two data frames using any \code{dplyr} join function
specified by the user. Supports joins specified as a string, symbol, or function.
}
\details{
This function allows flexible selection of join type while joining two data
frames. It evaluates the provided \code{join_type} and applies it with any
additional arguments passed via \code{...}. Useful for programmatically
performing joins in pipelines.
}
\seealso{
\code{\link[rlang]{sym}}, \code{\link[rlang]{eval_tidy}},
\code{\link[rlang]{is_symbol}}, \code{\link[rlang]{is_call}},
\code{\link[rlang]{abort}}, \code{\link[dplyr]{inner_join}},
\code{\link[dplyr]{left_join}}, \code{\link[dplyr]{full_join}},
\code{\link[dplyr]{right_join}}
}
